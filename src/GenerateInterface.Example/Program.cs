using GenerateInterface;
using System;
using System.Threading.Tasks;

namespace GenerateInterface.Example;

// Example service that will have an interface generated
[GenerateInterface]
public class UserService
{
    public async Task<User> GetUserAsync(int id)
    {
        await Task.Delay(100); // Simulate async work
        return new User { Id = id, Name = $"User {id}" };
    }

    public void DeleteUser(int id)
    {
        Console.WriteLine($"Deleting user {id}");
    }

    public bool IsUserActive(int id)
    {
        return id > 0;
    }

    public void MethodWithDefaults(string message = "Hello", int count = 1, bool enabled = true)
    {
        Console.WriteLine($"{message} (count: {count}, enabled: {enabled})");
    }

    // This private method won't be included in the interface
    private void InternalMethod()
    {
        Console.WriteLine("Internal method");
    }
}

// Example with custom interface name and namespace
[GenerateInterface(InterfaceName = "ICustomEmailService", Namespace = "GenerateInterface.Example.Services")]
public class EmailService
{
    public Task SendEmailAsync(string to, string subject, string body)
    {
        Console.WriteLine($"Sending email to {to}: {subject}");
        return Task.CompletedTask;
    }

    public bool ValidateEmailAddress(string email)
    {
        return email.Contains("@");
    }
}

// Example with generics
[GenerateInterface]
public class Repository<T> where T : class
{
    public Task<T?> GetByIdAsync<TKey>(TKey id) where TKey : notnull
    {
        return Task.FromResult<T?>(null);
    }

    public Task SaveAsync(T entity)
    {
        return Task.CompletedTask;
    }
}

// Example with auto properties
[GenerateInterface]
public class ConfigService
{
    public string DatabaseConnectionString { get; set; } = string.Empty;
    public int TimeoutSeconds { get; set; } = 30;
    public bool IsEnabled { get; set; } = true;
    public string? OptionalSetting { get; set; }
}

public class User
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
}

class Program
{
    static async Task Main(string[] args)
    {
        Console.WriteLine("GenerateInterface Example");
        Console.WriteLine("========================");

        // The interfaces IUserService, ICustomEmailService, and IRepository<T> 
        // should be automatically generated by the source generator

        var userService = new UserService();
        var user = await userService.GetUserAsync(1);
        Console.WriteLine($"Retrieved user: {user.Name}");

        userService.DeleteUser(1);
        Console.WriteLine($"User active: {userService.IsUserActive(1)}");
        userService.MethodWithDefaults();

        var emailService = new EmailService();
        await emailService.SendEmailAsync("test@example.com", "Test", "Hello World");
        Console.WriteLine($"Email valid: {emailService.ValidateEmailAddress("test@example.com")}");

        var repository = new Repository<User>();
        await repository.SaveAsync(user);
        var retrievedUser = await repository.GetByIdAsync(1);

        var configService = new ConfigService();
        configService.DatabaseConnectionString = "Server=localhost;Database=test;";
        configService.TimeoutSeconds = 60;
        Console.WriteLine($"Config: {configService.DatabaseConnectionString}, Timeout: {configService.TimeoutSeconds}");

        Console.WriteLine("Example completed successfully!");
    }
}